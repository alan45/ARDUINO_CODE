module mojo_top (
     input clk,              // 50MHz clock
     input rst_n,            // reset button (active low)
     output led [8],         // 8 user controllable LEDs
     output byte[8],
     output load,
     input request_to_send,
    
     input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy       // AVR RX buffer full
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    pulse pulse(.rst(rst));
    counter count(.rst(rst));
    dff ram_ptr[10];
    simple_ram ram (#SIZE(8), #DEPTH(1024));
    }
  
  
 
  
   var i;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
     
    // As a test fill up ram with incrementing count
   
   for (i = 0; i < 500; i++) 
      {
       ram.address    = i;
       ram.write_en   = 1;
       ram.write_data = i;
      }
    
    
    
  //  if(request_to_send == 0)
  //    {
       
       case (pulse.clock)
         {
    
          0: load  = 0;
          1: load  = 1;
            
          2: load  = 0;
             
          3: load  = 0;
          4: load  = 0;
          default: load = 0;
          }
   // }
    
    
    
    ram.write_en = 0;
    ram.address  = ram_ptr.q;
    ram_ptr.d = ram_ptr.q + 1;
    if(ram_ptr.q > 999) ram_ptr.d = 0;
    
    led = ram_ptr.q;
    byte = ram.read_data; 
   
       
         
    
    
    
    
    
    
    
    
    
  }
}