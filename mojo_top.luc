module mojo_top (
     input clk,              // 50MHz clock
     input rst_n,            // reset button (active low)
     output led [8],         // 8 user controllable LEDs
     output byte[8],
     output load,
     output  test1,
     output  test2,
     input request_to_send
   ) 
  
  {
  
  const NUM_BYTES = 250;
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector edge;
    pipeline pipe(#DEPTH(2));
    simple_ram ram(#SIZE(8), #DEPTH(NUM_BYTES));
        
    .rst(rst)
        {
        fsm state = {WRITE_RAM, READ_RAM, PULSE};
        pulse pulse;
        pulse2 pulse2;
        }
    }
  
  
 
  var i;
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = 8h00;             // turn LEDs off
    byte = 0;
    load = 0;
    test1 = 0;
    test2 = 0;
    
    ram.write_en   = 0;
    ram.address    = 0;
    ram.write_data = 0;
        
    
    pipe.in  = request_to_send;
    edge.in  = pulse.clock;
    
    
   
    
    
    case(state.q)
      
      {
      state.WRITE_RAM:
        
        if(pulse2.clock >= NUM_BYTES) state.d = state.READ_RAM; 
         else  
          {
          ram.write_data = pulse2.clock;
          ram.address    = pulse2.clock;
          ram.write_en   = 1;
          }
        
         
      state.READ_RAM: 
        if(pulse2.clock <= NUM_BYTES) 
           { 
           ram.address    = pulse2.clock;
           ram.write_en   = 0;
           led = ram.read_data;
           test1 = 1; 
           load  = 1;
           }
          
    }
      
  }  
   
}
